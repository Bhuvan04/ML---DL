X = bos.iloc[:,:-1]
Y = bos.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.33,random_state=42)

X_train.shape
X_test.shape

X_train.describe()
X_train.CHAS.unique()
X_train.CHAS.value_counts()

# Percentage and Sum of Missing values in each Columns
  missing_data = pd.DataFrame({'total_missing': data.isnull().sum(), 'perc_missing': (data.isnull().sum()/data.shape[0])*100})
  missing_data

# Mapping
  df['Gender']=df['Gender'].map({'F':0, 'M':1})

# Get Dummies
  city = pd.get_dummies(df['City_Category'],drop_first=True)

# Concat two datasets
  df = pd.concat([df,city],axis=1)
  
# filling the nan values with the mode
  df['cat2'] = df['cat2'].fillna(df['cat2'].mode()[0])
# forward filling
  data.loc[:,col] = data.loc[:,col].ffill()
# Filling Missing Values In "shot_basics" based on "range_of_short" column! if the range of the shot is 16-24 ft it's a mid range shot
  data.loc[(data.range_of_shot == '16-24 ft.'), 'shot_basics'] = data[data.range_of_shot == '16-24 ft.'].shot_basics.fillna(value='Mid Range')
# if the range of the shot is less than 8 ft then randomly assign goal line or goal area value to the shot 
  data.loc[(data.range_of_shot == 'Less Than 8 ft.')&(data.shot_basics.isnull()), 'shot_basics']   =  pd.Series(data[(data.range_of_shot == 'Less Than 8 ft.')&(data.shot_basics.isnull())].shot_basics.apply(lambda x: x if type(x)==str else np.random.choice(['Goal Area', 'Goal Line'],1,p=[0.7590347263095939, 0.24096527369040613])[0]))

  
# Dropping the column
  df.drop('City_Category',axis=1, inplace=True) 
  
# Replacing the value by using str method
  df['Stay_In_Current_City_Years']=df.Stay_In_Current_City_Years.str.replace('+','') # replacing + with blank

# Creating barplot
  sns.barplot('Age','Purchase',hue='Gender',data=df_i)

# Feature Scaling So that data in all the columns are to the same scale
  from sklearn.preprocessing import StandardScaler
  sc = StandardScaler()
  X_train = sc.fit_transform(X_train)
  X_test = sc.transform(X_test)
 
# Changing dtypes to datetime
  data.date_of_game = pd.to_datetime(data.date_of_game, errors='coerce')
  
# replacing categorical data with numerical values
  l_unique = data['game_season'].unique()
  v_unique = np.arange(len(l_unique))
  data['game_season'].replace(to_replace=l_unique, value=v_unique, inplace=True)




